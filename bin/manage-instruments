#!/bin/bash
#
#  Copyright: 2020 Regents of the University of Hawaii and the
#             School of Ocean and Earth Science and Technology
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
RESET="\e[0m";
RED="\e[31m";
YELLOW="\e[33m";
GREEN="\e[32m";
BLUE="\e[34m";
LOG_DIR="/var/log/realtime-data";      # log files location
if [[ -z ${REALTIME_DATA} ]]; then
    REALTIME_DATA=".";                 # installed realtime-data software location
fi
VERSION="1.3.0";                  # keep track of this script's version
if [[ -d "/etc/realtime-data" ]]; then
    CLASSPATH="/etc/realtime-data:${REALTIME_DATA}/realtime-data-${VERSION}-jar-with-dependencies.jar";
else
    CLASSPATH="${REALTIME_DATA}/src/main/resources:${REALTIME_DATA}/realtime-data-${VERSION}-jar-with-dependencies.jar";
fi

if [[ -d "/var/run/realtime-data" && -w "/var/run/realtime-data" ]]; then
    RUN_DIR="/var/run/realtime-data";
else
    RUN_DIR="${REALTIME_DATA}/run";
    echo -e "${YELLOW}WARN: /var/run/realtime-data does not exist. Create this directory as root.${RESET}";
    echo -e "${YELLOW}WARN: Using ${REALTIME_DATA}/run to store process ids instead.${RESET}";
fi

operation="";                     # operation to perform, either start or stop
unset option;                     # command line options variable

# ensure the logging file is writable
if [[ ! -d $LOG_DIR ]]; then
    echo -e "${YELLOW}WARN: The logging directory does not exist. Please issue:";
    echo -e "sudo mkdir -p $LOG_DIR";
    echo -e "sudo chown -R $USER $LOG_DIR${RESET}";
    exit 1;
fi

# show usage
usage() {
    cat << EOF

Usage:
$(basename "${0}") -l
$(basename "${0}") -c driver|archiver -o start|stop [-a] [-h] [-i instr1] [-i instr2] [-i instrN]
$(basename "${0}") -c rebuilder -i instr [-d directory]

List the status of all instrument drivers and archivers, or
start or stop one or more instrument source drivers or archivers by optionally providing the instrument id.

Alternatively, rebuild an instrument archive by providing the instrument id, and either a file
with samples to add to the archive, or an existing raw archive directory path.

OPTIONS:

    -a  Start, stop or show status for all configured instruments
    -c  The command to run, 'driver', 'archiver', 'rebuilder', to stream, archive, or rebuild data.
    -h  Show this message.
    -i  The instrument id. Use -i multiple times for multiple instruments. Use once for a rebuild.
    -l List the status of all drivers and archivers.
    -o  Indicate which operation to perform, start, stop, or status (requires 'driver' or 'archiver' commands).
    -d  The existing instrument archive to rebuild (requires 'rebuilder' command).
    -V  Show the version (${VERSION})

EOF
}

# show the version of this convenience script
show_version() {
    echo ${VERSION};
    exit 1;
}

# start the source driver or archiver given the instrument name and command
start() {
    command=${1}
    instrumentName=${2};
    instrument_path=$(find ${REALTIME_DATA}/conf -name "${instrumentName}.xml" -print);

    # Start the instrument driver
    if [[ "${command}" == "driver" ]]; then
        echo -e "${BLUE}: Starting the instrument driver for ${instrumentName}.${RESET}";
        java -cp ${CLASSPATH} \
            edu.hawaii.soest.pacioos.text.TextSourceApp \
            "${instrument_path}" > /dev/null 2>&1 &
        pid=$!;
        sleep 2;
        echo ${pid} > "${RUN_DIR}/${instrumentName}-driver.pid";


    # Or start the instrument archiver
    elif [[ "${command}" == "archiver" ]]; then
        echo -e "${BLUE}INFO: Starting the instrument archiver for ${instrumentName}.${RESET}";
        java -cp ${CLASSPATH} \
            edu.hawaii.soest.pacioos.text.TextSinkApp \
            "${instrument_path}" > /dev/null 2>&1 &
        sleep 2;
        pid=$!;
        echo ${pid} > "${RUN_DIR}/${instrumentName}-archiver.pid";
    fi

    # Tail the log file
    echo -e "\n${YELLOW}---- Press Control-c to stop viewing the log file -----\n${RESET}"
    tail -f "${LOG_DIR}/realtime-data.log";
}

# stop the source driver or archiver given a process id, command, and instrument name
stop() {
    pidToKill=${1};
    command=${2}
    instrumentName=${3};

    echo -e "${BLUE}INFO: Stopping the instrument ${command} for ${instrumentName}.${RESET}";
    if [[ "$pidToKill" =~ ^[0-9]+$ ]]; then
        kill -15 "${pidToKill}";
    else
        echo -e "${YELLOW}WARN: Couldn't stop the instrument ${command} for ${instrumentName}. ${RESET}";
        echo -e "${YELLOW}WARN: Couldn't identify the process id. ${RESET}";
        echo -e "${YELLOW}WARN: Trying by the instrument name. ${RESET}";
        pidToKill=$(pgrep -f "${instrumentName}");
        if [[ "$pidToKill" =~ ^[0-9]+$ ]]; then
            kill -15 "${pidToKill}";
        else
            echo -e "${RED}ERROR: Couldn't stop the instrument ${command} for ${instrumentName}. ${RESET}";
            echo -e "${RED}ERROR: Couldn't identify the process id. ${RESET}";
            echo -e "${RED}ERROR: Please manually find the pid and use 'kill -15 {pid}'. ${RESET}";
        fi
    fi

    sleep 1;
    rm "${RUN_DIR}/${instrumentName}-${command}.pid";
}

# Provide the status of the given instrument drivers or archivers
status() {
    # Print
    printf " %20s %15s %15s %15s\n" "Instrument" "Driver Status" "Archiver Status" "Deployment Type";
    instrument_paths=$(find "${REALTIME_DATA}"/conf/** -type f -name "*xml");
    for path in ${instrument_paths}; do
        filename=$(basename "${path}");
        instrument_name=${filename%.xml};
        deployment=$(rev <<< ${path} | cut -d "/" -f2 | rev); # reverse twice to get second to last column
        driver_pid=$(pgrep -f "TextSourceApp.*${instrument_name}");
        archiver_pid=$(pgrep -f "TextSinkApp.*${instrument_name}");
        driver_status="Not Running";
        archiver_status="Not Running";
        if [[ "${driver_pid}" -gt 0 ]]; then driver_status="Running"; fi
        if [[ "${archiver_pid}" -gt 0 ]]; then archiver_status="Running"; fi

        if [[ "${deployment}" == "online" && ("${driver_status}" == "Not Running" || "${archiver_status}" == "Not Running") ]]; then
            printf "${RED} %20s %15s %15s %15s${RESET}\n" "${instrument_name}" "${driver_status}" "${archiver_status}" "${deployment}";

         elif [[ "${deployment}" == "offline" || "${deployment}" == "retired" ]]; then
            printf "${BLUE} %20s %15s %15s %15s${RESET}\n" "${instrument_name}" "${driver_status}" "${archiver_status}" "${deployment}";

        else
            printf "${GREEN} %20s %15s %15s %15s${RESET}\n" "${instrument_name}" "${driver_status}" "${archiver_status}" "${deployment}";
        fi
    done
}

# rebuild an instrument archive from a file or directory
rebuild() {
    location=${1};
    instrumentName=${2};
    instrument_path=$(find ${REALTIME_DATA}/conf -name "${instrumentName}.xml" -print);
    echo -e "\n${BLUE}INFO: Rebuilding ${instrumentName} archive from ${location}\n${RESET}";
    java -cp ${CLASSPATH} -Xmx24g \
        edu.hawaii.soest.pacioos.text.TextRebuildApp \
        "${instrument_path}" "${location}"
}


instrument_paths=() # initialize an empty instruments array
# figure out how we were called
while getopts ":ac:hlVi:o:d:" OPTION; do
    case ${OPTION} in
        "a") instrument_paths=("${REALTIME_DATA}/conf/**/*xml");;
        "c") command="${OPTARG}";;
        "h") usage; exit 0;;
        "l") status; exit 0;;
        "i") instrument_paths+=("${OPTARG}.xml");;
        "o") operation="${OPTARG}";;
        "d") location="${OPTARG}";;
        "V") show_version;;
         \?) usage; echo -e "${RED}ERROR:   Invalid option: -${OPTARG}${RESET}"; exit 1;;
    esac
done

# ensure options are passed
if [ "${#instrument_paths[@]}" -eq 0 ]; then
    if [ "${command}" == "driver" ] || [ "${command}" == "archiver" ]; then
        usage;
        echo -e "\n${RED}ERROR: Use the -a option to start or stop all instrument drivers or archivers, ";
        echo -e "or optionally use the -i option one or more times.${RESET}";
        exit 1;
    elif [ "${command}" == "rebuilder" ]; then
        usage;
        echo -e "\n${RED}ERROR: The -i option is required to rebuild an instrument archive.${RESET}";
        exit 1;
    fi
fi


# validate the command
if [ "${command}" != "driver" ] && \
   [ "${command}" != "archiver" ] && \
   [ "${command}" != "rebuilder" ]; then
    usage;
    echo -e "\n${RED}ERROR: The -c option value must be driver, archiver, or rebuilder.${RESET}";
    exit 1;
fi

# validate the operation for drivers and archivers
if [ "${command}" == "driver" ] || [ "${command}" == "archiver" ]; then
    if [ "${operation}" != "start" ] && [ "${operation}" != "stop" ] && [ "${OPTION}" != "V" ]; then
        usage;
        echo -e "${RED}ERROR: The -o option value must be either start or stop.${RESET}";
        exit 1;
    fi
fi

# validate the location for the rebuilder
if [ "${command}" == "rebuilder" ]; then
    # ensure the file or directory path exists
    if [ ! -e "${location}" ] ; then
        usage;
        echo -e "\n${RED}ERROR: This location does not exist: ${location}";
        echo -e "Please provide a valid path.\n${RESET}";
        exit 1;
    fi

    # for directories, ensure they are in the raw data archive
    if [ -d "${location}" ]; then
        if [[ ! ("${location}" =~ \/data\/raw) ]]; then
            usage;
            echo -e "\n${RED}ERROR: The directory to rebuild must be within the /data/raw directory.\n${RESET}";
            exit 1;
        fi
    fi
fi

# validate the instruments array size for the rebuilder
if [ "${command}" == "rebuilder" ]; then
    if [ ${#instrument_paths[@]} -gt 1 ]; then
        usage;
        echo -e "\n${RED}ERROR: For the rebuilder, use just one -i instrument option.${RESET}";
        exit 1;
    fi
fi

# if needed, make the directory to store running driver processes
if [ ! -d "${REALTIME_DATA}/run" ]; then
    mkdir -p "${REALTIME_DATA}/run";
fi

# iterate through the list and perform the start or stop operation for drivers and archivers
if [ "${command}" == "driver" ] || [ "${command}" == "archiver" ]; then
    for instrument_path in "${instrument_paths[@]}"; do
        runningPid="";
        # Convert the instrument_path to a path when only given as an instrument name
        if [ ! -f "${instrument_path}" ]; then
            instrument_path=$(find ${REALTIME_DATA}/conf -name "${instrument_path}" -print);
        fi

        if [ -f "${instrument_path}" ]; then
            instrument=$(basename "${instrument_path}");

            # Stop the running instrument driver or archiver (even on start if needed)
            if [ -f "${RUN_DIR}/${instrument%.xml}-${command}.pid" ]; then
                runningPid=$(cat "${RUN_DIR}/${instrument%.xml}-${command}.pid");
            fi

            if [[ "${runningPid}" -gt 0 ]]; then
                stop "${runningPid}" "${command}" "${instrument%.xml}";
            else
                if [ "${command}" == "driver" ]; then
                    app="TextSourceApp";
                fi
                if [ "${command}" == "archiver" ]; then
                    app="TextSinkApp";
                fi
                runningPid=$(pgrep -f "${app}.*${instrument}");
                if [[ "${runningPid}" =~ [:digit:]+ ]]; then
                    echo "Calling stop 2: ${runningPid} ${command} ${instrument%.xml}";
                    stop "${runningPid}" "${command}" "${instrument%.xml}";
                fi
            fi

            # Conditionally start the instrument driver or archiver
            if [ "${operation}" == "start" ]; then
                start "${command}" "${instrument%.xml}" ;
            fi

        else
          echo -e "${YELLOW}WARN: Couldn't find config file ${instrument}. Skipping it.${RESET}";
        fi
    done
fi

# rebuild the archive given the file or directory location
if [ "${command}" == "rebuilder" ]; then

    if [ "${operation}" == "start" ]; then
        usage;
        echo -e "\n${YELLOW}WARN: The start operation is not used with the rebuilder command.${RESET}";
        exit 1;
    elif [ "${operation}" == "stop" ]; then
        usage;
        echo -e "\n${YELLOW}WARN: The stop operation is not used with the rebuilder command.${RESET}";
        exit 1;
    fi

    instrument_path="${instrument_paths[0]}";
    # Convert the instrument_path to a path when only given as an instrument name
    if [ ! -f "${instrument_path}" ]; then
        instrument_path=$(find ${REALTIME_DATA}/conf -name "${instrument_path}" -print);
    fi

    if [ -f "${instrument_path}" ]; then
        instrument=$(basename "${instrument_path}");
        rebuild "${location}" "${instrument%.xml}";
    else
        echo -e "${YELLOW}WARN: Couldn't find config file ${instrument_path}.xml. Skipping it.${RESET}";
    fi
fi

exit 0;