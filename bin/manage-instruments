#!/bin/bash
#
#  Copyright: 2020 Regents of the University of Hawaii and the
#             School of Ocean and Earth Science and Technology
#    Purpose: A convenience script to start instrument drivers using the
#             SimpleTextSource class.
#
#   Authors: Christopher Jones
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

LOG_DIR="/var/log/realtime-data";      # log files location
if [[ -z ${REALTIME_DATA} ]]; then
REALTIME_DATA=".";                     # installed realtime-data software location
fi
CLASSPATH="${REALTIME_DATA}/realtime-data-1.1.0-jar-with-dependencies.jar";
if [[ -e /etc/realtime-data/log4j.properties ]]; then
    CLASSPATH="/etc/realtime-data:${CLASSPATH}";
fi
VERSION="1.1.0";                  # keep track of this script's version
instruments="";                   # the instruments list to be processed
operation="";                     # operation to perform, either start or stop
unset option;                     # command line options variable

# ensure the logging file is writable
if [[ ! -d $LOG_DIR ]]; then
    echo "WARN: The logging directory does not exist. Please issue:";
    echo "sudo mkdir -p $LOG_DIR";
    echo "sudo chown -R $USER $LOG_DIR";
    exit 1;
fi

# show usage
usage() {
    cat << EOF

Usage: $(basename ${0}) -c driver|archiver -o start|stop [-a] [-h] [-i instr1] [-i instr2] [-i instrN]

Start or stop one or more instrument source drivers or archivers by optionally providing the instrument id.

OPTIONS:

    -a  Start or stop all configured instruments
    -c  The command to run, 'driver' or 'archiver', to stream or archive data respectively.
    -h  Show this message
    -i  The instrument id. Use -i multiple times for multiple instruments.
    -o  Indicate which operation to perform, start or stop.
    -V  Show the version (${VERSION})

EOF
exit 1;   
}

# show the version of this convenience script
show_version() {
    echo ${VERSION};
    exit 1;
}

# start the source driver or archiver given the instrument name and command
start() {
    command=${1}
    instrumentName=${2};

    # Start the instrument driver
    if [[ "${command}" == "driver" ]]; then
        echo "Starting the instrument driver for ${instrumentName}.";
        java -cp ${CLASSPATH} \
            edu.hawaii.soest.pacioos.text.TextSourceApp \
            ${REALTIME_DATA}/conf/"${instrumentName}.xml" 2>&1 &
        pid=$!;
        sleep 2;
        echo ${pid} > ${REALTIME_DATA}/run/"${instrumentName}-driver.pid";

    # Or start the instrument archiver
    elif [[ "${command}" == "archiver" ]]; then
        echo "Starting the instrument archiver for ${instrumentName}.";
        java -cp ${CLASSPATH} \
            edu.hawaii.soest.pacioos.text.TextSinkApp \
            ${REALTIME_DATA}/conf/"${instrumentName}.xml" 2>&1 &
        pid=$!;
        sleep 2;
        echo ${pid} > ${REALTIME_DATA}/run/"${instrumentName}-archiver.pid";
    fi
}

# stop the source driver or archiver given a process id, command, and instrument name
stop() {
    pidToKill=${1};
    command=${2}
    instrumentName=${3};
    echo "Stopping the instrument ${command} for ${instrumentName}.";
    kill -15 "${pidToKill}";
    sleep 1;
    rm ${REALTIME_DATA}/run/"${instrumentName}-${command}.pid";

}

# figure out how we were called
while getopts ":achVi:o:" OPTION; do
    case ${OPTION} in
        "a") instruments=$(ls ${REALTIME_DATA}/conf);;
        "c") command=${OPTARG};;
        "h") usage;;
        "i") instruments="${instruments} ${OPTARG}.xml";;
        "o") operation=${OPTARG};;
        "V") show_version;;
         \?) echo "ERROR:   Invalid option: -${OPTARG}";usage; exit 1;;
    esac
done

# ensure options are passed
if [ -z "${instruments}" ]; then
    echo -e "\nWARN: Use the -a option to start or stop all instrument drivers, ";
    echo "or optionally use the -i option one or more times."
    usage;
fi

# validate the command
if [ "${command}" != "driver" ] && [ "${command}" != "archiver" ] && [ "${OPTION}" != "V" ]; then
    echo "ERROR: The -c option value must be either driver or archiver.";
    usage;
fi

# validate the operation
if [ "${operation}" != "start" ] && [ "${operation}" != "stop" ] && [ "${OPTION}" != "V" ]; then
    echo "ERROR: The -o option value must be either start or stop.";
    usage;
fi

# if needed, make the directory to store running driver processes
if [ ! -d ${REALTIME_DATA}/run ]; then
    mkdir -p ${REALTIME_DATA}/run;
fi

# iterate through the list and perform the start or stop operation
for instrument in ${instruments}; do
    existingPid="";
    runningPid="";
    if [ -e ${REALTIME_DATA}/conf/"${instrument}" ]; then
        
        # Stop the running instrument driver or archiver (even on start if needed)
        if [ -e ${REALTIME_DATA}/run/"${instrument%.xml}-${command}.pid" ]; then
            existingPid=$(cat ${REALTIME_DATA}/run/"${instrument%.xml}-${command}.pid");
        fi
        
        runningPid=$(ps -o pid "${existingPid}" | grep -v PID);
        if [ -n "${existingPid}" ] && [ -n "${runningPid}" ]; then
            stop "${existingPid}" "${command}" "${instrument%.xml}";
        fi
        
        # Conditionally start the instrument driver or archiver
        if [ "${operation}" == "start" ]; then
            start "${command}" "${instrument%.xml}" ;
        fi
              
    else
      echo "WARN: Couldn't find config file ${REALTIME_DATA}/conf/${instrument}. Skipping it.";
    fi
done

exit 0;















