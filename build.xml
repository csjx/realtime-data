<?xml version="1.0"?>
<!--
  *  build.xml
  *
  *  Copyright: 2000 Regents of the University of Hawaii and the
  *         School of Ocean and Earth Science and Technology 
  *
  *   '$Author$'
  *   '$Date$'
  *   '$Revision$'
-->
<project name="bbl" default="compile" basedir=".">

  <target name="usage" depends="init">
  <exec executable="ant" dir="." vmlauncher="false">
    <arg line=" -projecthelp"/>
  </exec>
  </target>

  <target name="config">
  <property name="installdir" value="dist" />
  <property name="debuglevel" value="100"/>
  <!-- set the test that you want to run here -->
  <property name="testtorun" value="ReadSerial.java"/>
  </target>

  <target name="init" depends="config">
    <property name="name" value="kilonalu"/>
    <property name="Name" value="Kilo Nalu Real Time System"/>
    <property name="release" value="0.5.0"/>

    <filter token="release" value="${release}"/>

    <property name="srcdir" value="src/java" />
    <property name="libdir" value="lib" />
    <property name="testdir" value="test/java" />
    <property name="resourcedir" value="test/resources" />

    <property name="build.dir" value="./build"/>
    <property name="build.src" value="${build.dir}/src"/>
    <property name="build.dest" value="${build.dir}/classes"/>
    <property name="build.docs" value="${build.dir}/docs"/>
    <property name="build.samples" value="${build.dir}/samples"/>
    <property name="build.tests" value="${build.dir}/tests"/>
    <property name="build.data" value="${build.dir}/data"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.javadocs" value="${build.dir}/docs/api"/>
    <property name="package.home" value="edu/hawaii/soest" />

    <property name="dist.dir" value="dist"/>
    <property name="gumstix.dir" value="dist-gumstix"/>
    <property name="pacioos.dir" value="pacioos"/>
    <property name="ver.dir" value="${dist.dir}/${name}-${release}"/>
    <property name="ver.src" value="${ver.dir}/src"/>

    <filter token="debuglevel" value="${debuglevel}"/>
    <filter token="installdir" value="${installdir}"/>
    <filter token="name" value="${name}"/>

    <condition property="utilities.required">
      <or>
        <not><available file="lib/commons-cli-1.0.jar"/></not>
        <not><available file="lib/commons-httpclient-3.1.jar"/></not>
        <not><available file="lib/commons-lang-2.4.jar"/></not>
        <not><available file="lib/commons-logging-1.1.jar"/></not>
        <not><available file="lib/commons-configuration-1.6.jar"/></not>
        <not><available file="lib/commons-collections-3.2.1.jar"/></not>
        <not><available file="lib/commons-codec-1.3.jar"/></not>
        <not><available file="lib/commons-io-2.0.jar"/></not>
        <not><available file="lib/commons-math-2.0.jar"/></not>
        <not><available file="lib/commons-lang-2.4.jar"/></not>
        <not><available file="lib/dhmp.jar"/></not>
        <not><available file="lib/httpclient.jar"/></not>
        <not><available file="lib/junit-4.8.2.jar"/></not>
        <not><available file="lib/log4j-1.2.8.jar"/></not>
        <not><available file="lib/rbnb.jar"/></not>
        <not><available file="lib/RXTXcomm.jar"/></not>
        <not><available file="lib/utilities.jar"/></not>
        <not><available file="lib/xercesImpl.jar"/></not>
      </or>
    </condition>

    <!-- classpath jar files (including relative path from basedir) -->
    <property name="activationjar"  value="${libdir}/activation.jar"/>
    <property name="clijar"         value="${libdir}/commons-cli-1.0.jar"/>
    <property name="commhttpjar"    value="${libdir}/commons-httpclient-3.1.jar"/>
    <property name="langjar"        value="${libdir}/commons-lang-2.4.jar"/>
    <property name="mathjar"        value="${libdir}/commons-math-2.0.jar"/>
    <property name="loggingjar"     value="${libdir}/commons-logging-1.1.jar"/>
    <property name="configjar"      value="${libdir}/commons-configuration-1.6.jar"/>
    <property name="collectionsjar" value="${libdir}/commons-collections-3.2.1.jar"/>
    <property name="codecjar"       value="${libdir}/commons-codec-1.3.jar"/>
    <property name="iojar"          value="${libdir}/commons-io-2.0.jar"/>
    <property name="dhmpjar"        value="${libdir}/dhmp.jar"/>
    <property name="httpjar"        value="${libdir}/httpclient.jar"/>
    <property name="junitjar"       value="${libdir}/junit-4.8.2.jar"/>
    <property name="mailjar"        value="${libdir}/mail.jar"/>
    <property name="log4jjar"       value="${libdir}/log4j-1.2.8.jar"/>
    <property name="rbnbjar"        value="${libdir}/rbnb.jar"/>
    <property name="rxtxjar"        value="${libdir}/RXTXcomm.jar"/>
    <property name="utiljar"        value="${libdir}/utilities.jar"/>
    <property name="xercesjar"      value="${libdir}/utilities.jar"/>
    <!-- CLASSPATH -->
    <property name="cpath"      
      value="${activationjar}:${clijar}:${commhttpjar}:${dhmpjar}:${mathjar}:${mailjar}:${langjar}:${iojar}:${loggingjar}:${configjar}:${collectionsjar}:${codecjar}:${httpjar}:${junitjar}:${log4jjar}:${rbnbjar}:${rxtxjar}:${utiljar}:${xercesjar}" />
    <echo message="classpath is:   ${cpath}"/>
  </target>

   <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.lib}"/>
    <copy todir="${build.src}" filtering="yes">
      <fileset dir="${srcdir}">
        <include name="**/*.java"/>
        <include name="edu/**"/>
        <include name="com/**"/>
        <include name="org/**"/>
        <exclude name="**/CVS*"/>
        <exclude name="**/.#*"/>
        <exclude name="**/*.sql"/>
      </fileset>
    </copy>
   </target>

   <target name="compile" depends="prepare"
       description="compiles all the java classes">
    <javac srcdir="${build.src}"
       destdir="${build.dest}"
       classpath="${cpath}"
       debug="on">
       <compilerarg value="-Xlint:unchecked"/>
    </javac>
   </target>

   <target name="jar" depends="compile"
       description="compiles and jars all the java classes">
     <delete file="${build.dir}/${name}.jar" />
     <copy todir="${build.dest}/${package.home}/${name}" filtering="no">
       <fileset dir="${srcdir}/${package.home}/${name}">
       </fileset>
     </copy>
     <jar jarfile="${build.dir}/${name}.jar">
       <fileset dir="${build.dest}">
         <include name="${package.home}/${name}/**" />
         <exclude name="**/*.java"/>
       </fileset>
     </jar>
   </target>

   <target name="install" depends="jar">
    <mkdir dir="${installdir}" />
   </target>

   <target name="jdoc" depends="init,prepare"
       description="creates javadoc documentation for all the java classes">
     <mkdir dir="${build.javadocs}" />
     <javadoc packagenames="edu.hawaii.soest.*"
       sourcepath="src"
       destdir="${build.javadocs}"
       author="true"
       version="true"
       use="true"
       windowtitle="${Name} API"
       doctitle="&lt;h1&gt;${Name}&lt;/h1&gt;"
       bottom="&lt;i&gt;Copyright &#169; 2007 School of Ocean and Earth Science and Technology. All Rights Reserved.&lt;/i&gt;">
       <fileset dir="${build.src}">
         <include name="**/*.java"/>
         <exclude name="**/CVS*"/>
         <exclude name="**/.#*"/>
       </fileset>
     </javadoc>
   </target>

   <target name="clean" depends="init"
       description="deletes everything in the build directory">
     <delete>
      <fileset dir="${build.dir}">
      <include name="**/*.*"/>
      <exclude name="**/CVS*"/>
      <exclude name="**/.#*"/>
      </fileset>
     </delete>
   </target>

   <target name="buildtestjar" depends="clean,compile"
       description="copy and compile the tests into a jar file">
    <mkdir dir="${build.tests}"/>
    <copy todir="${build.tests}" filtering="yes">
      <fileset dir="${testdir}">
        <include name="**/*.java"/>
        <include name="**/*.xml"/>
        <exclude name="**/CVS*"/>
        <exclude name="**/.#*"/>
      </fileset>
    </copy>
    <copy todir="${build.tests}" filtering="no">
      <fileset dir="${resourcedir}">
        <include name="**/*.raw"/>
      </fileset>
    </copy>
    <javac srcdir="${build.tests}"
       destdir="${build.dest}"
       classpath="${cpath}"
       debug="on"/>

    <jar jarfile="${build.dir}/${name}-test.jar" basedir="${build.dest}">
      <fileset dir="${testdir}">
        <include name="${package.home}/${name}/**" />
        <exclude name="**/*.java"/>
      </fileset>
      <fileset dir="${resourcedir}">
        <include name="${package.home}/${name}/**" />
      </fileset>
    </jar>

   </target>

   <target name="test" depends="buildtestjar"
       description="run all JUnit tests">

    <!-- use the ant "junit" task to run JUnit tests. -->
    <junit printsummary="withOutAndErr" haltonfailure="yes" fork="no"
       haltonerror="yes" newenvironment="true">
    <classpath>
      <pathelement path="${cpath}:${build.dir}/${name}-test.jar:${build.dir}/classes" />
    </classpath>

    <formatter type="plain"  usefile="false"/>

    <batchtest fork="true" todir="${build.dir}">
      <fileset dir="${build.dest}">
      <include name="**/*Test.class" />
      </fileset>
    </batchtest>
   </junit>
   </target>
   
   
  <!-- run one test -->
  <target name="onetest" depends="buildtestjar" 
      description="target to run only ONE of the junit tests - you will be prompted for the class name">
                
    <!--input  message="Enter test class name (e.g. MyClassTest)"
        addproperty="test.class"/-->
          
    <junit printsummary="withOutAndErr" haltonfailure="true" fork="true"
       haltonerror="true" newenvironment="true">
    <classpath>
      <pathelement path="${cpath}" />
      <pathelement path="${build.dir}/${name}-test.jar" />
      <pathelement path="${build.dir}/classes" />
    </classpath>
        
    <formatter type="plain" usefile="false"/>

    <batchtest fork="true" todir="${build.dir}">
      <fileset dir="${build.dest}">
        <!--include name="**/${test.class}.class" /-->
        <include name="**/StorXParserTest.class" />
        <!--include name="**/CalibrationTest.class" /-->
      </fileset>
    </batchtest>
    </junit> 
  </target>


  <target name="dist" depends="jar,jdoc" description="jar all class files and documentation for distribution">
    <mkdir dir="${dist.dir}"/>
    <delete dir="${ver.dir}" />
    <mkdir dir="${ver.dir}"/>
    <copy todir="${ver.dir}">
      <fileset dir="." excludes="**/CVS* **/.svn* **/.#* **/build* **/docs* **/test/* ${dist.dir}"/>
    </copy>
    <copy todir="${ver.dir}" file="build.xml"/>
    <copy todir="${ver.dir}/lib" file="${build.dir}/${name}.jar"/>

    <copy todir="${ver.dir}/docs" filtering="yes" failonerror="false">
      <fileset dir="docs" excludes="**/*gif **/*jpg **/*png" />
    </copy>
    <copy todir="${ver.dir}/docs" filtering="no" failonerror="false">
      <fileset dir="docs" includes="**/*gif **/*jpg **/*png" />
    </copy>
    <copy todir="${ver.dir}/test" filtering="no" failonerror="false">
      <fileset dir="test" includes="tchain* AW01*txt"  excludes="**/data/*"/>
    </copy>
    <copy todir="${ver.dir}/docs/dev">
      <fileset dir="docs/dev"/>
    </copy>
    <copy todir="${ver.dir}/docs/user">
      <fileset dir="docs/user"/>
    </copy>

    <delete dir="./${ver.dir}/${build.dir}"/>
    <delete dir="./${ver.dir}/dist"/>
    <delete file="./${name}-${release}.zip"/>
    <zip zipfile="./${name}-${release}.zip" basedir="${dist.dir}" excludes="${name}-${release}/build/src/**"/>
    <!--delete file="./${name}-${release}.tar.gz" />
    <tar tarfile="./${name}-${release}.tar" basedir="${dist.dir}" excludes="${name}-${release}/src/**, ${name}-${release}/build/src/**"/>
    <gzip zipfile="./${name}-${release}.tar.gz" src="./${name}-${release}.tar"/>
    <delete file="./${name}-${release}.tar" /-->
  </target>

  <target name="dist-gumstix" 
          depends="compile" 
          description="jar class files, libraries, and scripts for gumstix deployment">
    <delete dir="${gumstix.dir}"/>
    <mkdir dir="${gumstix.dir}"/>
    <mkdir dir="${gumstix.dir}/bbl"/>
    <mkdir dir="${gumstix.dir}/bbl/trunk"/>
    <copy todir="${gumstix.dir}/bbl/trunk/build">
      <fileset dir="./build" 
               includes="**/ctd/CTD* **/utilities/File* **/utilities/Serial* **/rbnb/*"
               excludes="**/.svn* **/CVS* **/.#* **/src* **/lib/* **docs/*"/>
    </copy>                    
    <copy todir="${gumstix.dir}/bbl/trunk/lib">
      <fileset dir="./lib"   
        excludes="**/.svn* **/CVS* **/.#*" 
        includes="RXTXcomm.jar commons-cli-1.0.jar commons-codec-1.3.jar commons-collections-3.2.1.jar commons-configuration-1.6.jar commons-math-2.0.jar log4j-1.2.8.jar log4j.properties rbnb.jar utilities.jar xercesImpl.jar"/>
    </copy>                    
    <copy todir="${gumstix.dir}/bbl/trunk/bin">
      <fileset dir="./bin"   
               excludes="**/.svn* **/CVS* **/.#*" 
               includes="*CTDX* rbnb-gumstix authwifi-gumstix"/>
    </copy>
    <copy todir="${gumstix.dir}/bbl/trunk/bin">
      <fileset dir="./src/python/authentication"   
               excludes="**/.svn* **/CVS* **/.#*" 
               includes="*py"/>
    </copy>
    <copy todir="${gumstix.dir}/bbl/trunk" file = "build.xml" />
    <delete dir="${gumstix.dir}/bbl/trunk/build/docs" />
    <delete dir="${gumstix.dir}/bbl/trunk/build/lib" />
    <delete dir="${gumstix.dir}/bbl/trunk/build/src" />
    <delete file="./pacioos-gumstix.tar.gz" />
    <tar tarfile="./pacioos-gumstix.tar" basedir="${gumstix.dir}"/>
    <gzip zipfile="./pacioos-gumstix.tar.gz"
        src="./pacioos-gumstix.tar"/>
    <delete file="./pacioos-gumstix.tar" />    
  </target>
  
  <target name="dist-pacioos" 
          depends="compile" 
          description="jar class files, libraries, and scripts for pacioos deployment">
    <delete dir="${pacioos.dir}"/>
    <copy todir="${pacioos.dir}/build">
      <fileset dir="./build" 
               includes="**/utilities/FileSource* **/rbnb/RBNBBase* **/rbnb/RBNBSource*"
               excludes="**/.svn* **/CVS* **/.#* **/src* **/lib/* **docs/*"/>
    </copy>                    
    <copy todir="${pacioos.dir}/lib">
      <fileset dir="./lib"   
        excludes="**/.svn* **/CVS* **/.#*" 
        includes="commons-cli-1.0.jar log4j-1.2.8.jar log4j.properties rbnb.jar"/>
    </copy>                    
    <copy todir="${pacioos.dir}/bin">
      <fileset dir="./bin"   
               excludes="**/.svn* **/CVS* **/.#*" 
               includes="*PINM*"/>
    </copy>
    <copy todir="${pacioos.dir}/src">
      <fileset dir="./src"   
               excludes="**/.svn* **/CVS* **/.#*" 
               includes="**/rbnb/RBNBBase.java **/rbnb/RBNBSource.java **/utilities/FileSource.java"/>
    </copy>
    <copy todir="${pacioos.dir}" file="build.xml" />
    <copy todir="${pacioos.dir}" file="LICENSE" />
    <jar destfile="${pacioos.dir}/lib/pacioos.jar" basedir="${pacioos.dir}/build/classes"/>
    <zip destfile="./pacioos.zip" basedir="."
       includes="pacioos/**"/>
    <delete dir="${pacioos.dir}"/>
  </target>
  
  <target name="distsrc" depends="dist"
       description="jar all source files for distribution">
    <mkdir dir="${ver.src}"/>
    <copy todir="${ver.src}">
      <fileset dir="./src"/>
    </copy>

    <delete file="./${name}-src-${release}.zip"/>
    <zip zipfile="./${name}-src-${release}.zip" basedir="${dist.dir}"/>
    <delete file="./${name}-src-${release}.tar.gz" />
    <tar tarfile="./${name}-src-${release}.tar" basedir="${dist.dir}"/>
    <gzip zipfile="./${name}-src-${release}.tar.gz"
        src="./${name}-src-${release}.tar"/>
    <delete file="./${name}-src-${release}.tar" />
    <delete dir="${dist.dir}"/>
  </target>
</project>
