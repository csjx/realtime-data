Overview
========

This document provides an overview architecture for the PacIOOS, HIOOS, and BBL
intstrument driver software. Base classes include the NEES RBNBBase and
RBNBSource classes, and all instrument-specific drivers extend these classes.

RBNB DataTurbine Base Classes
-----------------------------

1. The following UML class diagram shows the RBNBBase and RBNBSource classes, used in all of the Java-based instrument drivers.

..:

  @startuml rbnb-drivers-class-diagram.png
  
  ' change the default styles
  
  skinparam shadowing false
  
  skinparam class {
    BackgroundColor #F5F5F5
    BorderColor #E3E3E3
    ArrowColor #E3E3E3
    
  }
  
  skinparam noteFontColor #C49858
  skinparam note {
    BackgroundColor #FCF8E4
    BorderColor #FCEED6
  
  }
  
  skinparam packageFontColor #9DA0A4
  skinparam package {
    BorderColor #CCCCCC
  }
  
  ' define the RBNB classes
  package org.nees.rbnb {
  
    note top of RBNBBase
      All drivers extend the RBNBBase 
      and RBNBSource classes to 
      communicate with the DataTurbine
    end note
    abstract class RBNBBase { 
    
      - String DEFAULT_SERVER_NAME 
      - int    DEFAULT_SERVER_PORT 
      - String serverName 
      - int    serverPort 
      - String server 
      - String DEFAULT_RBNB_CLIENT_NAME 
      - String rbnbClientName 
      - String optionNotes 
      ~ SimpleDateFormat simpleDateFormat 
      # boolean parseArgs(String[] args) 
      # boolean setArgs(CommandLine cmd) 
      # boolean setBaseArgs(CommandLine cmd) 
      + void setRBNBClientName(String clientName) 
      + void setServerName(String name) 
      + void setServerPort(int port) 
      + String getServerName() 
      + int getServerPort() 
      + String getServer() 
      + String getRBNBClientName() 
      # void printUsage() 
      # Options setOptions() 
      # Options setBaseOptions(Options opt) 
      # void setNotes(String notes) 
      # String getCVSVersionString() 
      + void writeMessage(String message) 
      + void writeProgressMessage(String message) 
    
    } 
  
  
    abstract class RBNBSource { 
    
    -int DEFAULT_CACHE_SIZE 
    #int cacheSize 
    -int DEFAULT_ARCHIVE_SIZE
    #int archiveSize 
    -String DEFAULT_ARCHIVE_MODE 
    #String archiveMode 
    -Source source 
    -boolean connected
    #Options setBaseOptions(Options opt) 
    #boolean setBaseArgs(CommandLine cmd)
    #boolean connect() 
    #void disconnect() 
    +boolean isConnected() 
    +Source getSource() 
    +int getCacheSize() 
    +void setCacheSize(int size) 
    +int getArchiveSize() 
    +void setArchiveSize(int size) 
    +String getArchiveMode() 
    +void setArchiveMode(String mode) 
    
    } 
  
  }
  
  RBNBBase <|-- RBNBSource
  
  ' define the pacioos classes
  
  package edu.hawaii.soest.pacioos.text {
  
    class TextSourceApp {
      +main(String[] args)
    
    }
      
    note top of TextSourceApp
        Application Entry point
    end note
    
    class TextSourceFactory {
      +Log logger
      -SimpleTextSource simpleTextSource
      +SimpleTextSource getSimpleTextSource(String configLocation)
      -SimpletextSource getFileTextSource()
      -SimpletextSource getSocketTextSource()
      -SimpletextSource getSerialTextSource()
    }
    
    TextSourceApp .d.> TextSourceFactory
  
    note top of SimpleTextSource
        SimpleTextSource uses a connectionType
        to determine if data come from a file, 
        socket, or serial connection.
    end note
    
    class SimpleTextSource {
      -Log logger
      -String identifier
      -String rbnbChannelName
      -SimpleDateFormat defaultDateFormat 
      -String delimiter
      -String recordDelimiter
      -List<String> dateFormats 
      -List<Integer> dateFields 
      -TimeZone tz
      -String timezone
      -String connectionType
      -Pattern dataPattern 
      #int state 
      -boolean readyToStream
      -Thread streamingThread 
      -int pollInterval 
      -int retryInterval 
      -ByteChannel channel
      -XMLConfiguration xmlConfig
      +String getCVSVersionString() 
      +boolean isRunning() 
      -void runWork() 
      +void setChannelName(String channelName)
      #boolean setArgs(CommandLine command) 
      #Options setOptions() 
      +boolean start() 
      -void startThread() 
      +boolean stop() 
      -void stopThread()
      +public boolean startConnection()
      +public boolean stopConnection()
      +String getTimezone()
      +void setTimezone(String timezone) 
      +List<String> getDateFormats() 
      +void setDateFormats(List<String> dateFormats) 
      +List<Integer> getDateFields()
      +void setDateFields(List<Integer> dateFields)
      +Date getSampleDate(String line)
      +String getConnectionType()
      +void setConnectionType()
      +String getChannelName()
      +void setChannelName(String channelName)
      +String getIdentifier()
      +void setIdentifier(String identifier)
      +String getPattern()
      +void setPattern(String pattern)
      +String getDelimiter()
      +void setDelimiter(String delimiter)
      +void setRecordDelimiter(String recordDelimiter)
      +String getRecordDelimiter()
      +void setConfiguration(XMLConfiguration xmlConfig)
      +XMLConfiguration getConfiguration()
    }
    
    class FileTextSource { 
  
      -String fileName 
      -BufferedReader fileReader 
      
      +FileSource() 
      #boolean execute() 
      +String getDataFilePath() 
      +void setDataFilePath(String dataFilePath) 
    
    } 
     
    class SocketTextSource { 
      -int bufferSize
      -String sourceHostName
      -int sourceHostPort
      +SocketTextSource() 
      #boolean execute() 
      #SocketChannel getSocketConnection()
      +int getBufferSize()
      +void setBufferSize(int bufferSize)
      +String getHostName()
      +void setHostName(String hostName)
      +int getHostPort()
      +void setHostPort(int hostPort)
    } 
  
    class SerialTextSource { 
      -int bufferSize
      -String serialPort
      -int baudRate
      -int dataBits
      -int stopBits
      -String parity
      +SerialTextSource() 
      #boolean execute() 
      #ByteChannel getSerialConnection()
      +String getSerialPort()
      +void setSerialPort(String serialPortName)
      +int getBufferSize()
      +void setBufferSize(int bufferSize)
    } 
  
  
  SimpleTextSource -r|> RBNBSource
  TextSourceFactory .l> SimpleTextSource
  SimpleTextSource <|-- FileTextSource
  SimpleTextSource <|-- SocketTextSource
  SimpleTextSource <|-- SerialTextSource
  
  } 
  
  @enduml 